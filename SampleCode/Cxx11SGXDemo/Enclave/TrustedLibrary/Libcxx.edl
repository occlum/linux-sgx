/*
 * Copyright (C) 2011-2020 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/* Libcxx.edl - EDL sample for trusted C++ library. */

enclave {
    
    /* 
     * A subset of the C++03 standard is supported.
     */

    trusted {
       
		public void ecall_lambdas_demo(void);
		public void ecall_auto_demo(void);
		public void ecall_decltype_demo(void);
		public void ecall_strongly_typed_enum_demo(void);
		public void ecall_range_based_for_loops_demo(void);
		public void ecall_static_assert_demo(void);
		public void ecall_virtual_function_control_demo(void);
		public void ecall_delegating_constructors_demo(void);
		public void ecall_std_function_demo(void);
		public void ecall_cxx11_algorithms_demo(void);
		public void ecall_variadic_templates_demo(void);
		public void ecall_SFINAE_demo(void);
		public void ecall_initializer_list_demo(void);
		public void ecall_rvalue_demo(void);
		public void ecall_nullptr_demo(void);
                public void ecall_enum_class_demo(void);
		public void ecall_new_container_classes_demo(void);
		public void ecall_tuple_demo(void);
		public void ecall_shared_ptr_demo(void);
		public void ecall_atomic_demo(void);
		public void ecall_mutex_demo(void);
		public void ecall_print_final_value_mutex_demo(void);
		public void ecall_mutex_demo_no_protection(void);
		public void ecall_print_final_value_no_protection(void);
		public void ecall_condition_variable_run(void);
		public void ecall_condition_variable_load(void);
		
    };
};
